function analysis = analyzeSession(timeSeries,lick,analysisEvents,analysisLabels,analysisColors,params,options)

arguments
    timeSeries struct
    lick double
    analysisEvents cell
    analysisLabels cell
    analysisColors cell
    params

    options.timeRange double = [-15, 15]
    options.stageTime double = [-2,0;0,2]
    options.lick_binSize double = 0.1
end

% Define analysis params
analysis = struct([]);
timeRange = options.timeRange;
stageTime = options.stageTime;

% Loop through all
for signal = 1:size(timeSeries,2)
    % Load signal of interest
    data = timeSeries(signal).data;
    finalFs = timeSeries(signal).finalFs;
    system = timeSeries(signal).system;

    % Loop through all events
    for i = 1:length(analysisEvents)
        % Save overall traces
        if isempty(analysisEvents{i}); continue; end
        [trace,t] = plotTraces(analysisEvents{i},timeRange,data,[1,1,1],params,...
                        signalFs=finalFs,signalSystem=system,plot=false);

        % Calculate subtrial averages
        stageAvg = nan(size(trace,1),size(stageTime,1));
        stageBin = (stageTime - timeRange(1)) * finalFs;
        stageAvgFit = nan(size(stageTime,1),2);
        for stage = 1:size(stageTime,1)
            stageWindow = stageBin(stage,1):stageBin(stage,2);
            stageAvg(:,stage) = mean(trace(:,stageWindow),2);

            % Fit stageAvg across session
            x = 1:size(trace,1); p = polyfit(x,stageAvg(:,stage)',1);
            stageAvgFit(stage,:) = p;

            % Test for significance
            []
        end

        % Calculate subtrial peaks
        stagePeak = nan(size(trace,1),size(stageTime,1));
        stagePeakFit = nan(size(stageTime,1),2);
        for stage = 1:size(stageTime,1)
            stageWindow = stageBin(stage,1):stageBin(stage,2);
            stagePeak(:,stage) = max(trace(:,stageWindow),[],2);

            % Fit stagePeak across session
            x = 1:size(trace,1); p = polyfit(x,stagePeak(:,stage)',1);
            stagePeakFit(stage,:) = p;
        end

        % Save traces and anlaysis data
        row = size(analysis,2) + 1;
        analysis(row).animal = params.session.animal;
        analysis(row).date = params.session.date;
        analysis(row).session = params.session.name;
        analysis(row).task = params.session.task;
        analysis(row).label = analysisLabels{i};
        analysis(row).name = timeSeries(signal).name;
        analysis(row).system = system;
        analysis(row).data = trace;
        analysis(row).timestamp = t;
        analysis(row).timeRange = timeRange;
        analysis(row).finalFs = finalFs;
        analysis(row).stageAvg.data = stageAvg;
        analysis(row).stageAvg.fit = stageAvgFit;
        analysis(row).stagePeak.data = stagePeak;
        analysis(row).stagePeak.fit = stagePeakFit;
        analysis(row).stageTime = stageTime;
        analysis(row).color = analysisColors{i};

        % Get lick events
        [lickRate,lickEvents,t_licks] = plotLicks(analysisEvents{i},timeRange,...
                        options.lick_binSize,[1 1 1],[],lick,params,plot=false);

        % Calculate subtrial averages
        stageAvg_lick = nan(size(lickRate,1),size(stageTime,1));
        stageBin = (stageTime - timeRange(1)) * (1/options.lick_binSize);
        stageAvgFit_lick = nan(size(stageTime,1),2);
        for stage = 1:size(stageTime,1)
            stageWindow = stageBin(stage,1):stageBin(stage,2);
            stageAvg_lick(:,stage) = mean(lickRate(:,stageWindow),2);

            % Fit stageAvg across session
            x = 1:size(trace,1); p = polyfit(x,stageAvg_lick(:,stage)',1);
            stageAvgFit_lick(stage,:) = p;
        end

        % Calculate subtrial peaks
        stagePeak_lick = nan(size(lickRate,1),size(stageTime,1));
        stagePeakFit_lick = nan(size(stageTime,1),2);
        for stage = 1:size(stageTime,1)
            stageWindow = stageBin(stage,1):stageBin(stage,2);
            stagePeak_lick(:,stage) = max(lickRate(:,stageWindow),[],2);

            % Fit stageAvg across session
            x = 1:size(trace,1); p = polyfit(x,stagePeak_lick(:,stage)',1);
            stagePeakFit_lick(stage,:) = p;
        end

        % Save lick traces
        row = size(analysis,2) + 1;
        analysis(row).animal = params.session.animal;
        analysis(row).date = params.session.date;
        analysis(row).session = params.session.name;
        analysis(row).task = params.session.task;
        analysis(row).label = analysisLabels{i};
        analysis(row).name = 'Lick';
        analysis(row).system = 'Lick';
        analysis(row).data.lickRate = lickRate;
        analysis(row).data.lickEvents = lickEvents;
        analysis(row).timestamp = t_licks;
        analysis(row).timeRange = timeRange;
        analysis(row).finalFs = 1/options.lick_binSize;
        analysis(row).stageAvg.data = stageAvg_lick;
        analysis(row).stageAvg.fit = stageAvgFit_lick;
        analysis(row).stagePeak.data = stagePeak_lick;
        analysis(row).stagePeak.fit = stagePeakFit_lick;
        analysis(row).stageTime = stageTime;
        analysis(row).color = analysisColors{i};
    end
end

% Save
save(strcat(params.session.path,filesep,'analysis_',params.session.name),'analysis','-append');
disp('Finished: analysis struct created and saved');

end