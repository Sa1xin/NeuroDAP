function Rin = getRin(trace, options)

arguments
    trace double

    options.headerString
    options.onset double
    options.pulseWidth double

    options.baseline double = 100 % in ms before RC pulse
    options.Fs double = 10000
    options.currentClamp logical = false
    options.amplitude double = -5
end

%% Check input

if ~isfield(options,'headerString')
    if ~isfield(options,["onset","pulseWidth"])
        error('Have to provide onset and pulseWith if headerString not provided!');
    end
    
else
    rc_pulse = phUtil_HeaderValue(options.headerString, 'state.phys.internal.pulseString_RCCheck');
    options.currentClamp = phUtil_HeaderValue(options.headerString,'state.phys.settings.currentClamp0');
    options.Fs = phUtil_HeaderValue(options.headerString,'state.phys.settings.inputRate', 1); % ms

    options.amplitude = phUtil_parsePulsePatternString(rc_pulse, 'amplitude');
    options.onset = phUtil_parsePulsePatternString(rc_pulse, 'delay');
    options.pulseWidth = phUtil_parsePulsePatternString(rc_pulse, 'pulseWidth');
end

%% Calculate basic params

time_step = 1000/options.Fs;
start_point = options.onset/time_step+1;
duration = options.pulseWidth/time_step;
end_point = start_point + duration;
end_baseline = max(start_point-1, 1);

start_baseline = (start_point-options.baseline/time_step);
start_baseline=max(start_baseline, 1);

%% Extract baseline
baseline = mean(trace(start_baseline:end_baseline));

%% Calculate Rin

switch options.mode
    case 'peak'
        if amplitude<0 
            vv=min(adWave.data(start_point:end_point));
        else
            vv=min(adWave.data(start_point:end_point));
        end
    case 'last10%'
        pp=0.1;
        ss1=start_point+floor((1-pp)*duration);
        vv=mean(adWave.data(ss1:end_point));
    case 'last30%'
        pp=0.3;
        ss1=start_point+floor((1-pp)*duration);
        vv=mean(adWave.data(ss1:end_point));
    case 'last50%'
        pp=0.5;
        ss1=start_point+floor((1-pp)*duration);
        vv=mean(adWave.data(ss1:end_point));
end
%   [amplitude vv-baseline]
if current_clamp
    Rin=1000*(vv-baseline)/amplitude;                
else
    Rin=1000*amplitude/(vv-baseline);                
end
