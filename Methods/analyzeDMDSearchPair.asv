function analyzeDMDSearchPair(curCell, pairIdx, options)

% Create spots summary file and plot summary figure

arguments
    curCell table
    pairIdx double

    options.redStim logical = true
    options.depthLineWidth double = [3,2.5,2,1.5,1.1,1,0.5];

    options.color

    options.save logical = true
    options.savePNG logical = true
    options.savePDF logical = true
    options.saveFIG logical = true

    options.outputFs double = 10000
    options.timeRange double = [-1,50] % in ms
    options.analysisWindowLength double = 50 % in ms after stim onset
    options.controlWindowLength double = 50 % in ms before stim onset
    options.eventSample % in sample
    options.nArtifactSamples double = 0 % in sample
    options.rcCheckRecoveryWindow double = 100 % in ms
    options.peakWindow double = 2 % in ms around the peak to average

    options.feature = 'auc'
    options.thresholdFactor double = 3 % 3*std

    options.resultsPathDate char = 'newest'
    options.saveDataPath string = 'default'
end

%% Setup

[~,~,~,~,blueWhiteRed,~,~] = loadColors;

% Define path
strsplit = split(curCell.Session,'Results');
expPath = strsplit{1};

% Define results path
if strcmp(options.saveDataPath,'default')
    resultsList = sortrows(struct2cell(dir(fullfile(expPath,'Results-*')))',3);
    if strcmp(options.resultsPathDate,'newest')
        resultsPath = fullfile(resultsList{end,2},resultsList{end,1});
    else
        [~,dateIdx] = find(cellfun(@(x) contains(x, options.resultsPathDate), resultsList(:,1)));
        resultsPath = fullfile(resultsList{dateIdx,2},resultsList{dateIdx,1});
    end
    if strcmp(options.saveDataPath,'default')
        options.saveDataPath = resultsPath;
    end
end

% Define colors
if options.redStim; stimColor = blueWhiteRed(end,:);
else; stimColor = blueWhiteRed(1,:); end
blue = blueWhiteRed(1,:);
red = blueWhiteRed(end,:);
purple = [232, 130, 250]./255;

% Define time windows
if options.outputFs ~= curCell.Options{1}.outputFs
    warning('analyzeDMDSearchPair: Default options.outputFs differs from outputFs extracted from cells_DMD. Using cells_DMD value instead!');
    options.outputFs = curCell.Options{1}.outputFs;
end
if options.timeRange ~= curCell.Options{1}.timeRange
    eventSample = abs(curCell.Options{1}.timeRange(1))*(curCell.Options{1}.outputFs/1000) + 1;
    plotFirstSample = eventSample + options.timeRange(1)*(curCell.Options{1}.outputFs/1000);
    plotLastSample = eventSample + options.timeRange(2)*(curCell.Options{1}.outputFs/1000);
    plotWindowLength = plotLastSample - plotFirstSample + 1;
    plotWindowTime = linspace(options.timeRange(1),options.timeRange(2),plotWindowLength);
    analysisWindow = eventSample : eventSample+options.analysisWindowLength*10;
else
    if isfield(curCell.Options{1},'plotWindowTime')
        plotWindowTime = curCell.Options{1}.plotWindowTime;
        plotWindowLength = length(plotWindowTime);
    else
        if isfield(curCell.Options{1},'plotWindowLength'); plotWindowLength = curCell.Options{1}.plotWindowLength;
        else; plotWindowLength = (options.timeRange(2)-options.timeRange(1))* options.outputFs/1000 + 1;
        end
        plotWindowTime = linspace(options.timeRange(1),options.timeRange(2),plotWindowLength);
    end
    eventSample = find(plotWindowTime==0);
    plotFirstSample = 1; plotLastSample = plotWindowLength;
    analysisWindow = eventSample : eventSample+options.analysisWindowLength*10;
end

%% Load search info

% Load cell info
diffMap = curCell.('Difference map'){1}.response{pairIdx};
diffVhold = curCell.('Difference map'){1}.diffVhold(pairIdx);
commonSpot = curCell.('Difference map'){1}.commonSpots{pairIdx};
commonDepth = curCell.('Difference map'){1}.commonDepths{pairIdx};
searchPair = curCell.('Difference map'){1}.pair{pairIdx};
search1Idx = searchPair(1); search2Idx = searchPair(2);

% Load search 1 info
search1_cmap = curCell.("Response map"){1}.currentMap{search1Idx};
search1_bmap = curCell.("Response map"){1}.baselineMap{search1Idx};
search1_vhold = curCell.Vhold{1}(search1Idx);
search1_hotspot = curCell.("Response map"){1}.hotspot{search1Idx};
search1_depths = curCell.("Response map"){1}.depths{search1Idx};

% Load search 2 info
search2_cmap = curCell.("Response map"){1}.currentMap{search2Idx};
search2_bmap = curCell.("Response map"){1}.baselineMap{search2Idx};
search2_vhold = curCell.Vhold{1}(search2Idx);
search2_hotspot = curCell.("Response map"){1}.hotspot{search2Idx};
search2_depths = curCell.("Response map"){1}.depths{search2Idx};

% Load cell location (not necessary)
try cellLoc = curCell.Options{1}.cellLocation;
catch
    cellLoc = [nan nan]; 
end

% Load stim duration
if strcmp('Protocol',curCell.Properties.VariableNames)
    stimDuration1 = curCell.("Protocol"){1}(search1Idx).pulseWidth;
    stimDuration2 = curCell.("Protocol"){1}(search2Idx).pulseWidth;
else
    stimDuration1 = 5; stimDuration2 = 5;
end

% Define color
if isfield(options,'color')
    color1 = options.color;
    color2 = 1 - 0.5*(1-options.color);
else
    if diffVhold
        if search1_vhold < -50; color1 = blueWhiteRed(end,:); 
        elseif search1_vhold > -10; color1 = blueWhiteRed(1,:); 
        else; color1 = purple; 
        end
        if search2_vhold < -50; color2 = blueWhiteRed(end,:); 
        elseif search2_vhold > -10; color2 = blueWhiteRed(1,:); 
        else; color2 = purple; 
        end
    else
        if search1_vhold < -50; color1 = blueWhiteRed(end,:);
        else; color1 = blueWhiteRed(1,:); end
        if search2_vhold < -50; color2 = blueWhiteRed(end-150,:);
        else; color2 = blueWhiteRed(150,:); end
    end
end

% Load noise model of this neuron
load(fullfile(expPath,['noise_cell',num2str(curCell.Cell),'.mat']),'allNullData');
Ethres = curCell.Stats{1}.Ethres; %-2 * noise_all.sigma;
Ithres = curCell.Stats{1}.Ithres; %2 * noise_all.sigma;

% Load spots.mat for this neuron
% cellResultsPath = fullfile(curCell.Session,['cell',num2str(curCell.Cell)]);
% depthfilename = strcat(curSearch,'_depth*.mat');
% spotsList = dir(fullfile(cellResultsPath,depthfilename));

%% Generate a summary figure for each search

for d = 1:length(commonDepth)
    %% Initialization
    curDepth = commonDepth(d);
    disp(['Ongoing: calculating statistics for searches: ', num2str(searchPair),' at depth ',num2str(curDepth)]);

    % Load spots.mat file of this depth
    % depthFilePath = fullfile(spotsList(d).folder,spotsList(d).name);
    % load(depthFilePath,'spotsAtDepth');

    % Get depth index for each search
    depthIdx1 = find(search1_depths == curDepth);
    depthIdx2 = find(search2_depths == curDepth);

    %% Load depth specific data for search 1
    depthResponseMap = diffMap(:,:,d);
    depthCommonSpots = commonSpot(:,:,d);
    depthCurrentMap1 = search1_cmap{depthIdx1};
    depthCurrentMap2 = search2_cmap{depthIdx2};
    depthBaselineMap1 = search1_bmap{depthIdx1};
    depthBaselineMap2 = search2_bmap{depthIdx2};
    spotSequence1 = repelem(1:height(search1_hotspot{depthIdx1}), cellfun(@numel, search1_hotspot{depthIdx1}))';
    depthHotspot1 = search1_hotspot{depthIdx1};
    spotSequence2 = repelem(1:height(search2_hotspot{depthIdx2}), cellfun(@numel, search2_hotspot{depthIdx2}))';
    depthHotspot2 = search2_hotspot{depthIdx2};

    % Determine current plot line width
    if curDepth <= length(options.depthLineWidth); LineWidth = options.depthLineWidth(curDepth);
    else; LineWidth = options.depthLineWidth(end); end

    % Get opto and prestim traces
    optoData1 = cell2mat(depthCurrentMap1); 
    optoData1 = optoData1(:,analysisWindow);
    ctrlData1 = cell2mat(depthBaselineMap1);
    ctrlData1 = ctrlData1(:,size(ctrlData1,2)-length(analysisWindow)+1:size(ctrlData1,2));
    optoTime1 = linspace(0,options.analysisWindowLength,size(optoData1,2));
    ctrlTime1 = linspace(-options.controlWindowLength,0,size(ctrlData1,2));
    optoData2 = cell2mat(depthCurrentMap2); 
    optoData2 = optoData2(:,analysisWindow);
    ctrlData2 = cell2mat(depthBaselineMap2);
    ctrlData2 = ctrlData2(:,size(ctrlData2,2)-length(analysisWindow)+1:size(ctrlData2,2));
    optoTime2 = linspace(0,options.analysisWindowLength,size(optoData2,2));
    ctrlTime2 = linspace(-options.controlWindowLength,0,size(ctrlData2,2));

    % Calculate max/min current for plotting
    optoMax1 = max(optoData1,[],'all'); optoMax2 = max(optoData2,[],'all');
    optoMin1 = min(optoData1,[],'all'); optoMin2 = min(optoData2,[],'all');
    optoMax = max([optoMax1 optoMax2],[],'all'); 
    optoMin = min([optoMin1 optoMin2],[],'all');

    % Get hotspot vs null spot
    hotspot1_spotIdx = cell2mat(cellfun(@(x) sum(x)>=1, search1_hotspot{depthIdx1}, UniformOutput=false));
    hotspot1_sweepIdx = cell2mat(cellfun(@(x) repmat(sum(x)>=1,size(x)), search1_hotspot{depthIdx1}, UniformOutput=false));
    hotspotData1 = optoData1(hotspot1_sweepIdx,:);
    nullspotData1 = optoData1(~hotspot1_sweepIdx,:);
    hotspot2_spotIdx = cell2mat(cellfun(@(x) sum(x)>=1, search2_hotspot{depthIdx2}, UniformOutput=false));
    hotspot2_sweepIdx = cell2mat(cellfun(@(x) repmat(sum(x)>=1,size(x)), search2_hotspot{depthIdx2}, UniformOutput=false));
    hotspotData2 = optoData2(hotspot2_sweepIdx,:);
    nullspotData2 = optoData2(~hotspot2_sweepIdx,:);

    % Get response statistics for each spot
    spotMax1_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.max{search1Idx}{depthIdx1},UniformOutput=false));
    spotMin1_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.min{search1Idx}{depthIdx1},UniformOutput=false));
    spotMaxTime1_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.maxTime{search1Idx}{depthIdx1},UniformOutput=false));
    spotMinTime1_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.minTime{search1Idx}{depthIdx1},UniformOutput=false));
    spotAUC1_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.auc{search1Idx}{depthIdx1},UniformOutput=false));
    ctrlAUC1_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.baseline.auc{search1Idx}{depthIdx1},UniformOutput=false));
    % ctrlSTD1_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.baseline.std{search1Idx}{depthIdx1},UniformOutput=false));
    ctrlMax1_avg = cell2mat(cellfun(@(x) max(x,[],'all'), depthBaselineMap1,UniformOutput=false));
    ctrlMin1_avg = cell2mat(cellfun(@(x) min(x,[],'all'), depthBaselineMap1,UniformOutput=false));
    [~,ctrlMaxTimeIdx_avg] = cellfun(@(x) max(x,[],'all'), depthBaselineMap1,UniformOutput=false);
    ctrlMaxTime1_avg = cell2mat(ctrlMaxTimeIdx_avg)/options.outputFs*1000;
    [~,ctrlMinTimeIdx_avg] = cellfun(@(x) max(x,[],'all'), depthBaselineMap1,UniformOutput=false);
    ctrlMinTime1_avg = cell2mat(ctrlMinTimeIdx_avg)/options.outputFs*1000;
    spotAbsAUC1 = sum(abs(optoData1),2)/options.outputFs; 
    ctrlAbsAUC1 = sum(abs(ctrlData1),2)/options.outputFs;
    spotAbsAUC1_avg = accumarray(spotSequence1(:), spotAbsAUC1(:), [], @(x) {x});
    ctrlAbsAUC1_avg = accumarray(spotSequence1(:), ctrlAbsAUC1(:), [], @(x) {x});
    spotAbsAUC1_avg = cell2mat(cellfun(@(x) mean(x,"all"), spotAbsAUC1_avg,UniformOutput=false));
    ctrlAbsAUC1_avg = cell2mat(cellfun(@(x) mean(x,"all"), ctrlAbsAUC1_avg,UniformOutput=false));

    spotMax2_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.max{search2Idx}{depthIdx2},UniformOutput=false));
    spotMin2_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.min{search2Idx}{depthIdx2},UniformOutput=false));
    spotMaxTime2_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.maxTime{search2Idx}{depthIdx2},UniformOutput=false));
    spotMinTime2_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.minTime{search2Idx}{depthIdx2},UniformOutput=false));
    spotAUC2_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.auc{search2Idx}{depthIdx2},UniformOutput=false));
    ctrlAUC2_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.baseline.auc{search2Idx}{depthIdx2},UniformOutput=false));
    % ctrlSTD2_avg = cell2mat(cellfun(@(x) mean(x,"all"), curCell.Stats{1}.baseline.std{search2Idx}{depthIdx2},UniformOutput=false));
    ctrlMax2_avg = cell2mat(cellfun(@(x) max(x,[],'all'), depthBaselineMap2,UniformOutput=false));
    ctrlMin2_avg = cell2mat(cellfun(@(x) min(x,[],'all'), depthBaselineMap2,UniformOutput=false));
    [~,ctrlMaxTimeIdx_avg] = cellfun(@(x) max(x,[],'all'), depthBaselineMap2,UniformOutput=false);
    ctrlMaxTime2_avg = cell2mat(ctrlMaxTimeIdx_avg)/options.outputFs*1000;
    [~,ctrlMinTimeIdx_avg] = cellfun(@(x) max(x,[],'all'), depthBaselineMap2,UniformOutput=false);
    ctrlMinTime2_avg = cell2mat(ctrlMinTimeIdx_avg)/options.outputFs*1000;
    spotAbsAUC2 = sum(abs(optoData2),2)/options.outputFs; 
    ctrlAbsAUC2 = sum(abs(ctrlData2),2)/options.outputFs;
    spotAbsAUC2_avg = accumarray(spotSequence2(:), spotAbsAUC2(:), [], @(x) {x});
    ctrlAbsAUC2_avg = accumarray(spotSequence2(:), ctrlAbsAUC2(:), [], @(x) {x});
    spotAbsAUC2_avg = cell2mat(cellfun(@(x) mean(x,"all"), spotAbsAUC2_avg,UniformOutput=false));
    ctrlAbsAUC2_avg = cell2mat(cellfun(@(x) mean(x,"all"), ctrlAbsAUC2_avg,UniformOutput=false));

    % Calculate response rate
    % Prestim success rate
    Iresponse_ctrl = cell2mat(arrayfun(@(x) length(findpeaks(ctrlData1(x,:),MinPeakDistance=20,MinPeakProminence=Ithres,MinPeakWidth=options.peakWindow*10)),...
                    1:size(ctrlData1,1),UniformOutput=false)');
    Eresponse_ctrl = cell2mat(arrayfun(@(x) length(findpeaks(-ctrlData1(x,:),MinPeakDistance=20,MinPeakProminence=-Ethres,MinPeakWidth=options.peakWindow*10)),...
                    1:size(ctrlData1,1),UniformOutput=false)');
    ISpotResponse_ctrl = accumarray(spotSequence1(:), Iresponse_ctrl(:), [], @(x) {x});
    ESpotResponse_ctrl = accumarray(spotSequence1(:), Eresponse_ctrl(:), [], @(x) {x});
    Irate1_ctrl = cell2mat(cellfun(@(x) length(find(x))/size(x,1), ISpotResponse_ctrl,UniformOutput=false));
    Erate1_ctrl = cell2mat(cellfun(@(x) length(find(x))/size(x,1), ESpotResponse_ctrl,UniformOutput=false));
    % Opto success rate
    Iresponse_opto = cell2mat(arrayfun(@(x) length(findpeaks(optoData1(x,:),MinPeakDistance=20,MinPeakProminence=Ithres,MinPeakWidth=options.peakWindow*10)),...
                    1:size(optoData1,1),UniformOutput=false)');
    Eresponse_opto = cell2mat(arrayfun(@(x) length(findpeaks(-optoData1(x,:),MinPeakDistance=20,MinPeakProminence=-Ethres,MinPeakWidth=options.peakWindow*10)),...
                    1:size(optoData1,1),UniformOutput=false)');
    ISpotResponse_opto = accumarray(spotSequence1(:), Iresponse_opto(:), [], @(x) {x});
    ESpotResponse_opto = accumarray(spotSequence1(:), Eresponse_opto(:), [], @(x) {x});
    Irate1_opto = cell2mat(cellfun(@(x) length(find(x))/size(x,1), ISpotResponse_opto,UniformOutput=false));
    Erate1_opto = cell2mat(cellfun(@(x) length(find(x))/size(x,1), ESpotResponse_opto,UniformOutput=false));

    % Prestim success rate
    Iresponse_ctrl = cell2mat(arrayfun(@(x) length(findpeaks(ctrlData2(x,:),MinPeakDistance=20,MinPeakProminence=Ithres,MinPeakWidth=options.peakWindow*10)),...
                    1:size(ctrlData2,1),UniformOutput=false)');
    Eresponse_ctrl = cell2mat(arrayfun(@(x) length(findpeaks(-ctrlData2(x,:),MinPeakDistance=20,MinPeakProminence=-Ethres,MinPeakWidth=options.peakWindow*10)),...
                    1:size(ctrlData2,1),UniformOutput=false)');
    ISpotResponse_ctrl = accumarray(spotSequence2(:), Iresponse_ctrl(:), [], @(x) {x});
    ESpotResponse_ctrl = accumarray(spotSequence2(:), Eresponse_ctrl(:), [], @(x) {x});
    Irate2_ctrl = cell2mat(cellfun(@(x) length(find(x))/size(x,1), ISpotResponse_ctrl,UniformOutput=false));
    Erate2_ctrl = cell2mat(cellfun(@(x) length(find(x))/size(x,1), ESpotResponse_ctrl,UniformOutput=false));
    % Opto success rate
    Iresponse_opto = cell2mat(arrayfun(@(x) length(findpeaks(optoData2(x,:),MinPeakDistance=20,MinPeakProminence=Ithres,MinPeakWidth=options.peakWindow*10)),...
                    1:size(optoData2,1),UniformOutput=false)');
    Eresponse_opto = cell2mat(arrayfun(@(x) length(findpeaks(-optoData2(x,:),MinPeakDistance=20,MinPeakProminence=-Ethres,MinPeakWidth=options.peakWindow*10)),...
                    1:size(optoData2,1),UniformOutput=false)');
    ISpotResponse_opto = accumarray(spotSequence2(:), Iresponse_opto(:), [], @(x) {x});
    ESpotResponse_opto = accumarray(spotSequence2(:), Eresponse_opto(:), [], @(x) {x});
    Irate2_opto = cell2mat(cellfun(@(x) length(find(x))/size(x,1), ISpotResponse_opto,UniformOutput=false));
    Erate2_opto = cell2mat(cellfun(@(x) length(find(x))/size(x,1), ESpotResponse_opto,UniformOutput=false));

    %% Plot figure
    disp(['Ongoing: plotting summary for searches: ', num2str(searchPair),' at depth ',num2str(curDepth)]);
    close all;
    initializeFig(1,1);
    masterLayout = tiledlayout(4,4);
    masterLayout.TileSpacing = 'compact';
    masterLayout.Padding = 'compact';

    % Plot current trace map
    nexttile(masterLayout,1); axis off;
    depthLayout = tiledlayout(masterLayout,2^curDepth,2^curDepth);
    depthLayout.Layout.Tile = 1;
    depthLayout.Layout.TileSpan = [4 2];
    depthLayout.TileSpacing = 'none'; depthLayout.Padding = 'tight'; 
    % title(['Depth ', num2str(curDepth),': current responses']);

    for t = 1:4^curDepth
        nexttile(depthLayout,t);
        if isempty(depthCurrentMap1{t})
            trace1 = nan(1,plotWindowLength);
            spotHotspot1 = false;
        else
            trace1 = depthCurrentMap1{t}(:,plotFirstSample:plotLastSample);
            spotHotspot1 = sum(depthHotspot1{t})>=1;
        end
        if isempty(depthCurrentMap2{t})
            trace2 = nan(1,plotWindowLength);
            spotHotspot2 = false;
        else
            trace2 = depthCurrentMap2{t}(:,plotFirstSample:plotLastSample);
            spotHotspot2 = sum(depthHotspot2{t})>=1;
        end

        if spotHotspot1
            plotSEM(plotWindowTime,trace1,color1,opacity=1,...
                    plotIndividual=true,LineWidth=LineWidth);
        else
            plotSEM(plotWindowTime,trace1,color1,opacity=0.3,...
                    plotIndividual=true,LineWidth=LineWidth);
        end
        if spotHotspot2
            plotSEM(plotWindowTime,trace2,color2,opacity=1,...
                    plotIndividual=true,LineWidth=LineWidth);
        else
            plotSEM(plotWindowTime,trace2,color2,opacity=0.3,...
                    plotIndividual=true,LineWidth=LineWidth);
        end

        xlim([options.timeRange(1), options.timeRange(2)]); 
        ylim([optoMin, optoMax]);
        plotEvent('',stimDuration1,shadeOnly=true,color=color1,FaceAlpha=0.3,percentY=10,zeroValue=Ithres);
        plotEvent('',stimDuration2,shadeOnly=true,color=color2,FaceAlpha=0.3,percentY=10,zeroValue=Ethres);
        % Plot thresholds
        if any([search1_vhold,search2_vhold] > -10); yline(Ithres,'--',color=blue,Alpha=0.5);
        elseif any([search1_vhold,search2_vhold] < -50); yline(Ethres,'--',color=red,Alpha=0.5);
        else; yline(Ithres,'--',color=blue,Alpha=0.5); yline(Ethres,'--',color=red,Alpha=0.5);
        end
        % Plot axis at the bottom-left tile
        if t ~= 4^curDepth-2^curDepth+1; axis off
        else
            xlabel('ms'); ylabel('pA'); box off; 
            xticks([0,50]); 
            yticks(sort(unique([round(optoMin)-eps,round(Ethres),round(Ithres),round(optoMax)+eps])));
        end
    end

    % Plot response map (common spot)
    ax_response = nexttile(masterLayout,3,[2 1]);
    depthCommonResponse = depthResponseMap;
    depthCommonResponse(depthCommonResponse & ~depthCommonSpots) = 0;
    imagesc(depthResponseMap); axis off; hold on;
    cb = colorbar; cb.Label.String = '\Delta charge (pC)';
    climit = max(abs(depthResponseMap),[],'all');
    if climit == 0; climit = eps; end 
    clim([-climit, climit]); 
    colormap(ax_response,flip(blueWhiteRed));
    scatter(cellLoc(1),cellLoc(2),50,'o','filled','MarkerFaceColor','k','MarkerEdgeColor','none');
    title(['Depth ', num2str(curDepth),': \Delta',curCell.Options{1}.feature]);

    % Plot opto vs prestim trace 
    nexttile(masterLayout,4);
    traceLayout = tiledlayout(masterLayout,1,2);
    traceLayout.Layout.Tile = 4;
    traceLayout.TileSpacing = 'compact'; traceLayout.Padding = 'tight'; axis off;
    nexttile(traceLayout,1);
    plotSEM(ctrlTime1(end-200:end),ctrlData1(:,end-200:end),...
            [.8 .8 .8],plotIndividual=true,label='Baseline');
    plotSEM(optoTime1,nullspotData1,[.6 .6 .6],plotIndividual=true,label='Nullspot');
    plotSEM(optoTime1,hotspotData1,color1,plotIndividual=true,label='Hotspot');
    xlabel('Time from stim (ms)'); ylabel('pA'), ylim([optoMin1, optoMax1]);
    legend(Location='best');
    title(['Search epoch ', num2str(searchPair(1)),': opto vs baseline trace']);
    nexttile(traceLayout,2);
    plotSEM(ctrlTime2(end-200:end),ctrlData2(:,end-200:end),...
            [.8 .8 .8],plotIndividual=true,label='Baseline');
    plotSEM(optoTime2,nullspotData2,[.6 .6 .6],plotIndividual=true,label='Nullspot');
    plotSEM(optoTime2,hotspotData2,color2,plotIndividual=true,label='Hotspot');
    xlabel('Time from stim (ms)'); ylabel('pA'), ylim([optoMin2, optoMax2]);
    legend(Location='best');
    title(['Search epoch ', num2str(searchPair(2)),': opto vs baseline trace']);

    % Plot noise vs response distribution
    nexttile(masterLayout,8); 
    distLayout = tiledlayout(masterLayout,1,2);
    distLayout.Layout.Tile = 8;
    distLayout.TileSpacing = 'compact'; distLayout.Padding = 'tight'; axis off;

    nexttile(distLayout,1);
    h_baseline = histogram(allNullData,'Normalization','pdf'); hold on
    h_baseline.FaceColor = [.8,.8,.8]; h_baseline.EdgeColor = [.8,.8,.8];
    if find(~hotspot1_spotIdx)
        xline(spotMax1_avg(~hotspot1_spotIdx),':',color=blueWhiteRed(100,:)); hold on
        xline(spotMin1_avg(~hotspot1_spotIdx),':',color=blueWhiteRed(400,:)); hold on
    end
    if find(hotspot1_spotIdx)
        xline(spotMax1_avg(hotspot1_spotIdx),'--',color=blue); hold on
        xline(spotMin1_avg(hotspot1_spotIdx),'--',color=red); hold on
    end
    xline(Ethres,'-',color=red,Label='Exci. threshold',LineWidth=5,LabelHorizontalAlignment='left'); hold on
    xline(Ithres,'-',color=blue,Label='Inhi. threshold',LineWidth=5); hold on; box off;
    xlabel('Current (pA)');
    title(['Search epoch ', num2str(searchPair(1)),': noise vs response']);
    nexttile(distLayout,2);
    h_baseline = histogram(allNullData,'Normalization','pdf'); hold on
    h_baseline.FaceColor = [.8,.8,.8]; h_baseline.EdgeColor = [.8,.8,.8];
    if find(~hotspot2_spotIdx)
        xline(spotMax2_avg(~hotspot2_spotIdx),':',color=blueWhiteRed(100,:)); hold on
        xline(spotMin2_avg(~hotspot2_spotIdx),':',color=blueWhiteRed(400,:)); hold on
    end
    if find(hotspot2_spotIdx)
        xline(spotMax2_avg(hotspot2_spotIdx),'--',color=blue); hold on
        xline(spotMin2_avg(hotspot2_spotIdx),'--',color=red); hold on
    end
    xline(Ethres,'-',color=red,Label='Exci. threshold',LineWidth=5,LabelHorizontalAlignment='left'); hold on
    xline(Ithres,'-',color=blue,Label='Inhi. threshold',LineWidth=5); hold on; box off;
    xlabel('Current (pA)');
    title(['Search epoch ', num2str(searchPair(2)),': noise vs response']);

    % Plot statistics
    nexttile(masterLayout,11);
    statLayout1 = tiledlayout(masterLayout,1,5);
    statLayout1.Layout.Tile = 11;
    statLayout1.Layout.TileSpan = [1 2];
    statLayout1.TileSpacing = 'compact'; statLayout1.Padding = 'tight'; axis off;

    % Plot hotspot vs nullspot min response
    nexttile(statLayout1,1,[1 3]);
    peakLayout1 = tiledlayout(statLayout1,1,6);
    peakLayout1.Layout.Tile = 1; peakLayout1.Layout.TileSpan = [1 3];
    peakLayout1.TileSpacing = 'compact'; peakLayout1.Padding = 'tight'; axis off;
    nexttile(peakLayout1,1,[1 5]);
    if find(hotspot1_spotIdx); plotScatterBar(1,spotMin1_avg(hotspot1_spotIdx),color=red); end
    if find(~hotspot1_spotIdx); plotScatterBar(2,spotMin1_avg(~hotspot1_spotIdx),color=[.6 .6 .6]); end
    if find(hotspot2_spotIdx); plotScatterBar(5,spotMin2_avg(hotspot2_spotIdx),color=red); end
    if find(~hotspot2_spotIdx); plotScatterBar(7,spotMin2_avg(~hotspot2_spotIdx),color=[.6 .6 .6]); end
    % Plot hotspot vs nullspot max response
    if find(hotspot1_spotIdx); plotScatterBar(9,spotMax1_avg(hotspot1_spotIdx),color=blue); end
    if find(~hotspot1_spotIdx); plotScatterBar(11,spotMax1_avg(~hotspot1_spotIdx),color=[.6 .6 .6]); end  
    if find(hotspot2_spotIdx); plotScatterBar(13,spotMax2_avg(hotspot2_spotIdx),color=blue); end
    if find(~hotspot2_spotIdx); plotScatterBar(15,spotMax2_avg(~hotspot2_spotIdx),color=[.6 .6 .6]); end  
    ticks = {'Min hotspot','','Min nullspot','Min hotspot','','Min nullspot',...
            'Max hotspot','','Max nullspot','Max hotspot','','Max nullspot';...
            '','Search 1','','','Search 2','','','Search 1','','','Search 2',''};
    ticksAdjusted = strjust(pad(ticks),'center');
    tickLabels = strtrim(sprintf('%s\\newline%s\n', ticksAdjusted{:}));
    xlim([0,16]); xticks([1 2 3  5 6 7  9 10 11  13 14 15]);
    xticklabels(tickLabels); xtickangle(0);
    ylabel('Current (pA)');
    title('Max response current');

    % Plot ctrl min/max response
    nexttile(peakLayout1,6);
    plotScatterBar(1,[ctrlMin1_avg;ctrlMin2_avg],color=[.8 .8 .8]);
    plotScatterBar(2,[ctrlMax1_avg;ctrlMax2_avg],color=[.8 .8 .8]);
    xticks([1 2]); xticklabels({'Excitatory','Inhibitory'});
    ylabel('Current (pA)');
    title('Max ctrl current');

    % Plot hotspot vs nullspot AUC
    nexttile(statLayout1,4);
    if find(hotspot1_spotIdx); plotScatterBar(1,spotAUC1_avg(hotspot1_spotIdx),color=red); end
    if find(~hotspot1_spotIdx); plotScatterBar(3,spotAUC1_avg(~hotspot1_spotIdx),color=[.6 .6 .6]); end
    if find(hotspot2_spotIdx); plotScatterBar(5,spotAUC2_avg(hotspot2_spotIdx),color=red); end
    if find(~hotspot2_spotIdx); plotScatterBar(7,spotAUC2_avg(~hotspot2_spotIdx),color=[.6 .6 .6]); end
    plotScatterBar(9,[ctrlAUC1_avg;ctrlAUC2_avg],color=[.8 .8 .8]);
    ticks = {'Hotspot','','Nullspot','Hotspot','','Nullspot','Ctrl';...
            '','Search 1','','','Search 2','',''};
    ticksAdjusted = strjust(pad(ticks),'center');
    tickLabels = strtrim(sprintf('%s\\newline%s\n', ticksAdjusted{:}));
    xlim([0,10]); xticks([1 2 3  5 6 7  9]);
    xticklabels(tickLabels); xtickangle(0);
    ylabel('Net total charge (pC)');
    title('Net total charge');

    % Plot hotspot vs nullspot absolute AUC
    nexttile(statLayout1,5);
    if find(hotspot1_spotIdx); plotScatterBar(1,spotAbsAUC1_avg(hotspot1_spotIdx),1,color=red); end
    if find(~hotspot1_spotIdx); plotScatterBar(spotAbsAUC1_avg(~hotspot1_spotIdx),3,color=[.6 .6 .6]); end
    if find(hotspot2_spotIdx); plotScatterBar(spotAbsAUC2_avg(hotspot2_spotIdx),5,color=red); end
    if find(~hotspot2_spotIdx); plotScatterBar(spotAbsAUC2_avg(~hotspot2_spotIdx),7,color=[.6 .6 .6]); end
    plotScatterBar([ctrlAbsAUC1_avg;ctrlAbsAUC2_avg],9,color=[.8 .8 .8]);
    ticks = {'Hotspot','','Nullspot','Hotspot','','Nullspot','Ctrl';...
            '','Search 1','','','Search 2','',''};
    ticksAdjusted = strjust(pad(ticks),'center');
    tickLabels = strtrim(sprintf('%s\\newline%s\n', ticksAdjusted{:}));
    xlim([0,10]); xticks([1 2 3  5 6 7  9]);
    xticklabels(tickLabels); xtickangle(0);
    ylabel('Absolute total charge (pC)');
    title('Absolute total charge');

    % Other statistics
    nexttile(masterLayout,15);
    statLayout2 = tiledlayout(masterLayout,1,5);
    statLayout2.Layout.Tile = 15;
    statLayout2.Layout.TileSpan = [1 2];
    statLayout2.TileSpacing = 'compact'; statLayout2.Padding = 'tight'; axis off;

    % Plot hotspot vs nullspot minTime
    nexttile(statLayout2,1,[1 2]);
    peakLayout2 = tiledlayout(statLayout2,1,6);
    peakLayout2.Layout.Tile = 1; peakLayout2.Layout.TileSpan = [1 3];
    peakLayout2.TileSpacing = 'compact'; peakLayout2.Padding = 'tight'; axis off;
    nexttile(peakLayout2,1,[1 5]);
    if find(hotspot1_spotIdx); plotScatterBar(spotMinTime1_avg(hotspot1_spotIdx),1,color=red); end
    if find(~hotspot1_spotIdx); plotScatterBar(spotMinTime1_avg(~hotspot1_spotIdx),3,color=[.6 .6 .6]); end
    if find(hotspot2_spotIdx); plotScatterBar(spotMinTime2_avg(hotspot2_spotIdx),5,color=red); end
    if find(~hotspot2_spotIdx); plotScatterBar(spotMinTime2_avg(~hotspot2_spotIdx),7,color=[.6 .6 .6]); end
    % Plot hotspot vs nullspot maxTime
    if find(hotspot1_spotIdx); plotScatterBar(spotMaxTime1_avg(hotspot1_spotIdx),9,color=blue); end
    if find(~hotspot1_spotIdx); plotScatterBar(spotMaxTime1_avg(~hotspot1_spotIdx),11,color=[.6 .6 .6]); end  
    if find(hotspot2_spotIdx); plotScatterBar(spotMaxTime2_avg(hotspot2_spotIdx),13,color=blue); end
    if find(~hotspot2_spotIdx); plotScatterBar(spotMaxTime2_avg(~hotspot2_spotIdx),15,color=[.6 .6 .6]); end  
    ticks = {'Min hotspot','','Min nullspot','Min hotspot','','Min nullspot',...
            'Max hotspot','','Max nullspot','Max hotspot','','Max nullspot';...
            '','Search 1','','','Search 2','','','Search 1','','','Search 2',''};
    ticksAdjusted = strjust(pad(ticks),'center');
    tickLabels = strtrim(sprintf('%s\\newline%s\n', ticksAdjusted{:}));
    xlim([0,16]); xticks([1 2 3  5 6 7  9 10 11  13 14 15]);
    xticklabels(tickLabels); xtickangle(0);
    ylabel('Time (ms)');
    title('Time to max response current');

    % Plot control minTime/maxTime
    nexttile(peakLayout2,6);
    plotScatterBar(1,[ctrlMinTime1_avg;ctrlMinTime2_avg],color=[.8 .8 .8]);
    plotScatterBar(2,[ctrlMaxTime1_avg;ctrlMaxTime2_avg],color=[.8 .8 .8]);
    xticks([1 2 3 4 5 6]); 
    xticklabels({'Excitatory','Inhibitory'});
    ylabel('Time (ms)');
    title('Time to max ctrl current');

    % Plot spot response rate vs noise response rate (excitatory)
    nexttile(statLayout2,4); 
    if find(hotspot1_spotIdx); plotScatterBar(Erate1_opto(hotspot1_spotIdx),1,color=red); end
    if find(~hotspot1_spotIdx); plotScatterBar(Erate1_opto(~hotspot1_spotIdx),3,color=[.6 .6 .6]); end
    if find(hotspot2_spotIdx); plotScatterBar(Erate2_opto(hotspot2_spotIdx),5,color=red); end
    if find(~hotspot2_spotIdx); plotScatterBar(Erate2_opto(~hotspot2_spotIdx),7,color=[.6 .6 .6]); end
    plotScatterBar([Erate1_ctrl;Erate2_ctrl],9,color=[.8 .8 .8]);
    ticks = {'Hotspot','','Nullspot','Hotspot','','Nullspot','Ctrl';...
            '','Search 1','','','Search 2','',''};
    ticksAdjusted = strjust(pad(ticks),'center');
    tickLabels = strtrim(sprintf('%s\\newline%s\n', ticksAdjusted{:}));
    xlim([0,10]); xticks([1 2 3  5 6 7  9]);
    xticklabels(tickLabels); xtickangle(0);
    ylabel('Net total charge (pC)');
    ylabel('Excitatory response rate');
    title('Excitatory response rate');
    
    % Plot spot response rate vs noise response rate (inhibitory)
    nexttile(statLayout2,5); 
    if find(hotspot1_spotIdx); plotScatterBar(Irate1_opto(hotspot1_spotIdx),1,color=blue); end
    if find(~hotspot1_spotIdx); plotScatterBar(Irate1_opto(~hotspot1_spotIdx),3,color=[.6 .6 .6]); end
    if find(hotspot2_spotIdx); plotScatterBar(Irate2_opto(hotspot2_spotIdx),5,color=blue); end
    if find(~hotspot2_spotIdx); plotScatterBar(Irate2_opto(~hotspot2_spotIdx),7,color=[.6 .6 .6]); end
    plotScatterBar([Irate1_ctrl;Irate2_ctrl],9,color=[.8 .8 .8]);
    ticks = {'Hotspot','','Nullspot','Hotspot','','Nullspot','Ctrl';...
            '','Search 1','','','Search 2','',''};
    ticksAdjusted = strjust(pad(ticks),'center');
    tickLabels = strtrim(sprintf('%s\\newline%s\n', ticksAdjusted{:}));
    xlim([0,10]); xticks([1 2 3  5 6 7  9]);
    xticklabels(tickLabels); xtickangle(0);
    ylabel('Net total charge (pC)');
    ylabel('Inhibitory response rate');
    title('Inhibitory response rate');

    %% Save figure
    filename = ['spots_cell',num2str(curCell.Cell),'_depth',num2str(curDepth)];
    if diffVhold
        filepath = fullfile(options.saveDataPath,['cell',num2str(curCell.Cell)],'Diff Vhold pairs',...
                    ['Pair ',num2str(searchPair(1)),'-',num2str(searchPair(2))]);
    else
        filepath = fullfile(options.saveDataPath,['cell',num2str(curCell.Cell)],'Same Vhold pairs',...
                    ['Pair ',num2str(searchPair(1)),'-',num2str(searchPair(2))]);
    end
    saveFigures(gcf,[filename,'_',curCell.Options{1}.feature],filepath,...
                savePNG=options.savePNG,savePDF=options.savePDF,saveFIG=options.saveFIG);
    disp(['Finished: saving summary for searches: ', num2str(searchPair),' at depth ',num2str(curDepth)]);
end

disp(['Finished: analysis finished for searches : ', num2str(searchPair)]);
close all;
end