% Shun_figure_WiChR.m

%% Setup

clear; close all;
addpath(genpath(osPathSwitch('/Volumes/MICROSCOPE/Shun/Analysis/NeuroDAP/Methods')));
[~,~,~,~,~,~,bluePurpleRed] = loadColors;

% Define result directory
resultspath = osPathSwitch('/Volumes/MICROSCOPE/Shun/Project valence/Results');

fileList = uipickfiles('FilterSpec',osPathSwitch('/Volumes/MICROSCOPE/Shun/Project valence/Results'));
groupSessions = false;
% Update resultspath
dirsplit = strsplit(fileList{1},filesep); projectName = dirsplit{end-1}; 
resultspath = strcat(resultspath,filesep,projectName);
% Load selected files
for file = 1:length(fileList)
    dirsplit = strsplit(fileList{file},filesep);
    disp(['Ongoing: loading ',dirsplit{end}]);
    load(fileList{file});
    disp(['Finished: loaded ',dirsplit{end}]);
end

%% Baseline dLight: plot water, airpuff, stim, tone

timeRange = [-0.5,3];
eventRange = 'WiChR';
animalRange = 'All';
taskRange = 'Reward';
trialRange = 'All'; % range of trials in each session
totalTrialRange = 'All';
signalRange = 'dLight';
trialConditions = 'trials.performing == 1';

colorList = bluePurpleRed(1,:);

initializeFig(.5,.5);
combined = combineTraces(animals,timeRange=timeRange,...
                            eventRange=eventRange,...
                            animalRange=animalRange,...
                            taskRange=taskRange,...
                            totalTrialRange=totalTrialRange,...
                            trialRange=trialRange,...
                            signalRange=signalRange,...
                            trialConditions=trialConditions);
% plotTraces(combined.data{1},combined.timestamp,color=colorList);
plotGroupTraces(combined.data{1},combined.timestamp,bluePurpleRed,...
                        groupSize=15,nGroups=3,...
                        groupby='trials',startIdx=combined.options.startIdx,remaining='include');
xlabel('Time (s)'); ylabel([signalRange,' z-score']); ylim([-2,3]);
plotEvent(eventRange,.5,color=colorList);
% saveFigures(gcf,'Summary_random_dLight_WiChR',...
%         strcat(resultspath),...
%         saveFIG=true,savePDF=true);

%% dLight: Plot overall to show animal learned

timeRange = [-0.5,3];
eventRange = {'Stim','WiChR'};
animalRange = {'SL351','SL352','SL354','SL355','SL356'};
totalTrialRange = 'All';
trialRange = 'All';
signalRange = 'dLight';
trialConditions = 'trials.performing == 1';

colorList = {bluePurpleRed(500,:),bluePurpleRed(1,:)};
groupSizeList = [40;15];
nGroupsList = [15;15];

taskRange = {'Reward','Punish'};
ylimList = [-1,4; -1,4];

for task = 1:length(taskRange)
    initializeFig(0.5,0.5); tiledlayout('flow');
    for event = 1:length(eventRange)
        nexttile;
        if event == 4
            combined = combineTraces(animals,timeRange=timeRange,...
                                        eventRange=eventRange{event},...
                                        animalRange=animalRange,...
                                        taskRange=taskRange{task},...
                                        totalTrialRange=totalTrialRange,...
                                        trialRange=trialRange,...
                                        signalRange=signalRange,...
                                        trialConditions='');
        else
            combined = combineTraces(animals,timeRange=timeRange,...
                                        eventRange=eventRange{event},...
                                        animalRange=animalRange,...
                                        taskRange=taskRange{task},...
                                        totalTrialRange=totalTrialRange,...
                                        trialRange=trialRange,...
                                        signalRange=signalRange,...
                                        trialConditions=trialConditions);
        end
        legendList = plotGroupTraces(combined.data{1},combined.timestamp,bluePurpleRed,...
                        groupSize=groupSizeList(event),nGroups=3,...
                        groupby='trials',startIdx=combined.options.startIdx,remaining='include');
        ylim(ylimList(task,:));
        plotEvent(eventRange{event},.5,color=colorList{event});
        xlabel('Time (s)'); ylabel([signalRange,' z-score']);
        legend(legendList,'Location','northeast');
    end
    % saveFigures(gcf,['Summary_dLight_WiChR_',taskRange{task}],...
    %     strcat(resultspath),...
    %     saveFIG=true,savePDF=true);
end


%% Plot grouped CS DA response (grouped across animal and 10 trials)

statsTypes = {'stageAmp','stageAmp'}; ylabelList = {'Amp DA response during cue','Amp DA response during cue'};
ylimit = [-1,4; -1,5];

animalRange = {'SL351','SL352','SL354','SL355','SL356'};
conditionRange = 'All';
signalRange = 'dLight';
trialRange = 'All';
trialConditions = 'trials.performing == 1';
colorList = {bluePurpleRed(1,:),[0.8,0.8,0.8],bluePurpleRed(500,:),bluePurpleRed(300,:)};


eventRange = {'Baseline','Stim','Pair'};
reward_combinedStats = getGroupedTrialStats(animals,statsTypes,...
                            eventRange=eventRange,...
                            animalRange=animalRange,...
                            taskRange='reward',...
                            trialRange=trialRange,...
                            totalTrialRange=conditionRange,...
                            signalRange=signalRange,...
                            trialConditions=trialConditions);
punish_combinedStats = getGroupedTrialStats(animals,statsTypes,...
                            eventRange=eventRange,...
                            animalRange=animalRange,...
                            taskRange='punish',...
                            trialRange=trialRange,...
                            totalTrialRange=conditionRange,...
                            signalRange=signalRange,...
                            trialConditions=trialConditions);
reward_WiChRStats = getGroupedTrialStats(animals,statsTypes,...
                            eventRange='WiChR',...
                            animalRange=animalRange,...
                            taskRange='reward',...
                            trialRange=trialRange,...
                            totalTrialRange=conditionRange,...
                            signalRange=signalRange,...
                            trialConditions=trialConditions);
punish_WiChRStats = getGroupedTrialStats(animals,statsTypes,...
                            eventRange='WiChR',...
                            animalRange=animalRange,...
                            taskRange='punish',...
                            trialRange=trialRange,...
                            totalTrialRange=conditionRange,...
                            signalRange=signalRange,...
                            trialConditions=trialConditions);

initializeFig(.6,1); tiledlayout('flow');
reward_WiChR = plotGroupedTrialStats(reward_WiChRStats,ylabelList,groupSize=15,...
        color=colorList,xlimIdx=1,xlim=[0,45],ylim=ylimit(1,:));
punish_WiChR = plotGroupedTrialStats(punish_WiChRStats,ylabelList,groupSize=15,...
        color=colorList,xlimIdx=1,xlim=[0,45],ylim=ylimit(1,:));
reward_results = plotGroupedTrialStats(reward_combinedStats,ylabelList,groupSize=10,...
        color=colorList,xlimIdx=2,xlim=[0,100],ylim=ylimit(1,:));
punish_results = plotGroupedTrialStats(punish_combinedStats,ylabelList,groupSize=10,...
        color=colorList,xlimIdx=2,xlim=[0,100],ylim=ylimit(2,:));




% Plot DA slope
eventRange = {'WiChR','Baseline','Stim','Pair'};
reward_combinedStats = getGroupedTrialStats(animals,statsTypes,...
                            eventRange=eventRange,...
                            animalRange=animalRange,...
                            taskRange='reward',...
                            trialRange=trialRange,...
                            totalTrialRange=conditionRange,...
                            signalRange=signalRange,...
                            trialConditions=trialConditions);
punish_combinedStats = getGroupedTrialStats(animals,statsTypes,...
                            eventRange=eventRange,...
                            animalRange=animalRange,...
                            taskRange='punish',...
                            trialRange=trialRange,...
                            totalTrialRange=conditionRange,...
                            signalRange=signalRange,...
                            trialConditions=trialConditions);
reward_results = plotGroupedTrialStats(reward_combinedStats,ylabelList,plot=false);
punish_results = plotGroupedTrialStats(punish_combinedStats,ylabelList,plot=false);

nexttile;
cur_stats = reward_results.stats{1};
for event = 1:length(eventRange)
    slopes = cur_stats{event}(:,1);
    plotScatterBar(event,slopes,color=colorList{event},...
                   style='bar',dotSize=200,LineWidth=2,connectPairs=true);

    % Calculate significance
    if event < length(eventRange)
        for i = event+1:length(eventRange)
            plotStats(slopes,cur_stats{i}(:,1),[event i],testType='kstest');
        end
    end
end

xticks(1:length(eventRange)); xticklabels(eventRange);
ylabel('Slope of DA amplitude during CS');


nexttile;
cur_stats = punish_results.stats{1};
for event = 1:length(eventRange)
    slopes = cur_stats{event}(:,1);
    plotScatterBar(event,slopes,color=colorList{event},...
                   style='bar',dotSize=200,LineWidth=2,connectPairs=true);

    % Calculate significance
    if event < length(eventRange)
        for i = event+1:length(eventRange)
            plotStats(slopes,cur_stats{i}(:,1),[event i],testType='kstest');
        end
    end
end

xticks(1:length(eventRange)); xticklabels(eventRange);
ylabel('Slope of DA amplitude during CS');

% saveFigures(gcf,'Summary_CSvsTrialsGrouped_dLight_slopeBar',...
%         strcat(resultspath),...
%         saveFIG=true,savePDF=true);